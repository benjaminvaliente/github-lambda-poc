version: 0.2
env:
  variables:
    build_number: $CODEBUILD_BUILD_NUMBER
    lambda_function_name: $TF_VAR_lambda_function_name
#    region: $TF_VAR_region
#    service_type: $TF_VAR_service_type
#    lambda_runtime: $TF_VAR_lambda_runtime
phases:
  install:
    runtime-versions:
      python: 3.8
    on-failure: ABORT
    commands:
      - echo "Getting started with AWS Lambda deployment..."
      - echo ${build_number}
      - echo ${TF_VAR_lambda_function_name}
      - echo ${TF_VAR_region}
      - echo ${lambda_function_name}
      - echo ${CODEBUILD_BUILD_NUMBER}
      - echo "Installing dependencies..."
      - apt install unzip -y
      - pip install -r requirements.txt -t lib
      - wget https://releases.hashicorp.com/terraform/1.1.8/terraform_1.1.8_linux_amd64.zip
      - unzip terraform_1.1.8_linux_amd64.zip && mv terraform /usr/local/bin/
  pre_build:
    on-failure: ABORT
    commands:
      - cd ./terraform-code
      - terraform init
  build:
    on-failure: ABORT
    commands:
      - echo "Zipping deployment package..."
      - cd ../.build/
      - zip Lambda_${build_number}.zip lambda_function.py
      - echo "Deploying new Lambda function..."
      #- if [ $${TF_ACTION} == "apply" ]; then terraform apply; fi
      - cd ../terraform-code/
      - echo "Starting Terraform plan..."
      - terraform plan
      - echo "Starting Terraform apply..."
      - terraform apply
  post_build:
    on-failure: ABORT
    commands:
      - echo "Updating Lambda function..."
      - aws lambda update-function-code --function-name ${TF_VAR_lambda_function_name} --zip-file fileb://Lambda_${build_number}.zip
      - echo "Lambda updated successfully!"