version: 0.2
phases:
  install:
    runtime-versions:
      python: 3.8
    on-failure: ABORT
    commands:
      - echo "Getting started with AWS Lambda deployment number ${CODEBUILD_BUILD_NUMBER}..."
      - echo "Installing dependencies..."
      - apt install unzip -y
      - pip install -r requirements.txt -t lib
      - wget https://releases.hashicorp.com/terraform/1.1.8/terraform_1.1.8_linux_amd64.zip
      - unzip terraform_1.1.8_linux_amd64.zip && mv terraform /usr/local/bin/
  pre_build:
    on-failure: ABORT
    commands:
      - cd ./terraform-code
      - terraform init
  build:
    on-failure: ABORT
    commands:
      - echo "Zipping deployment package..."
      - cd ../.build/
      - zip Lambda_Artifact.zip lambda_function.py
      - ls && pwd
      - mkdir -p unzip
      - unzip Lambda_Artifact.zip -d unzip
      - ls -l unzip
      - echo "Deploying new Lambda function..."
      #- if [ $${TF_ACTION} == "apply" ]; then terraform apply; fi
      - cd ../terraform-code/
      - echo "Starting Terraform plan..."
      - terraform plan
      - echo "Starting Terraform apply..."
      - terraform apply -auto-approve
  post_build:
    on-failure: ABORT
    commands:
      - echo "Updating Lambda function..."
      - aws lambda update-function-code --function-name ${TF_VAR_lambda_function_name} --zip-file fileb://Lambda_Artifact.zip
      - echo "Lambda updated successfully!"