version: 2

jobs:
  build:
    working_directory: /tmp/project/
    docker:
      - image: ubuntu:20.04
    steps:
      - checkout
      - run:
          name: build lambda
          command: |
            echo "Getting started with AWS Lambda deployment..."
            echo "Installing dependencies..."
            apt update -y && apt install -y zip
            echo "Zipping deployment package..."
            cd ./.build/
            zip lambda_artifact.zip lambda_function.py
      - store_artifacts:
          path: ./.build/
          destination: lambda_artifact.zip
      - persist_to_workspace:
          root: .
          paths:
            - .
  plan-apply:    
    working_directory: /tmp/project/
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - checkout
      - run:
          name: terraform init & plan
          command: |
            echo "Starting Terraform init and plan..."
            cd ./terraform-code/
            yum install -y curl
            curl -H "Circle-Token: $var_circleci_api_access" https://circleci.com/api/v1.1/project/github/benjaminvaliente/github-lambda-poc/latest/artifacts
            terraform init -input=false -backend-config="access_key=$var_aws_access_key_id" -backend-config="secret_key=$var_aws_secret_access_key"
            terraform plan -out tfapply -var-file variables.tf
      - persist_to_workspace:
          root: .
          paths:
            - .
            - ./terraform-code/
  apply:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform
          command: |
            echo "Deploying new Lambda function..."
            terraform apply -auto-approve tfapply
      - persist_to_workspace:
          root: .
          paths:
            - .
            - /tmp/project/circleci-project-setup/terraform-code/
  plan-deploy:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: deploy
          command: |        
            echo "Waiting for approval..."
      - persist_to_workspace:
          root: .
          paths:
            - .
            - /tmp/project/circleci-project-setup/terraform-code/
  deploy:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: deploy
          command: |        
            echo "Updating Lambda function..."
            aws lambda update-function-code --function-name $TF_VAR_lambda_function_name --zip-file fileb://lambda_artifact.zip
            echo "Lambda updated successfully!"  
      - persist_to_workspace:
          root: .
          paths:
            - .
  plan-destroy:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform create destroy plan
          command: |
            terraform plan -destroy -out tfdestroy -var-file variables.tf
      - persist_to_workspace:
          root: .
          paths:
            - .
  destroy:
    docker:
      - image: docker.mirror.hashicorp.services/hashicorp/terraform:light
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform destroy
          command: |
            terraform apply -auto-approve tfdestroy
workflows:
  version: 2
  plan_approve_apply:
    jobs:
      - build
      - plan-apply:
          requires: 
            - build  
      - hold-apply:
          type: approval
          requires:
            - plan-apply
      - apply:
          requires:
            - hold-apply
      - hold-deploy:
          type: approval
          requires:
            - apply
      - deploy:
          requires:
            - hold-deploy
      - plan-destroy:
          requires:
            - apply
      - hold-destroy:
          type: approval
          requires:
            - plan-destroy
      - destroy:
          requires:
            - hold-destroy
      